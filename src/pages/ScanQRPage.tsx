
import { useState } from "react";
import DashboardLayout from "@/components/layouts/DashboardLayout";
import { Card, CardContent } from "@/components/ui/card";
import CustomButton from "@/components/CustomButton";
import { parseQRCode } from "@/services/QRCodeService";
import AttendanceService from "@/services/AttendanceService";
import { QRData } from "@/types";
import { useAuth } from "@/contexts/AuthContext";
import { toast } from "sonner";
import { ScanLine } from "lucide-react";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";

// Mock component for QR Scanner since we can't use real camera in this environment
const MockQRScanner = ({ onScan }: { onScan: (data: string) => void }) => {
  // For demo, we'll provide a mock QR code that would be generated by faculty
  const mockQrData: QRData = {
    id: "mock-qr-id-123",
    subject: "Computer Science 101",
    date: new Date().toISOString().split("T")[0],
    time: "10:00",
    facultyId: "f1",
  };

  const handleScanDemo = () => {
    const qrString = btoa(JSON.stringify(mockQrData));
    onScan(qrString);
  };

  return (
    <div className="flex flex-col items-center">
      <div className="w-full max-w-sm h-64 bg-gray-200 rounded-md flex items-center justify-center mb-4">
        <div className="text-center">
          <ScanLine size={48} className="mx-auto mb-2 text-gray-400" />
          <p className="text-gray-500">QR Scanner Placeholder</p>
        </div>
      </div>
      <div className="mb-4 text-center">
        <p className="text-sm text-gray-500 mb-4">
          This is a demo. In a real app, this would activate your camera to scan a QR code.
        </p>
      </div>
      <CustomButton onClick={handleScanDemo}>
        Simulate QR Scan
      </CustomButton>
    </div>
  );
};

const ScanQRPage = () => {
  const { user } = useAuth();
  const [scanning, setScanning] = useState(true);
  const [scannedData, setScannedData] = useState<QRData | null>(null);
  const [error, setError] = useState<string | null>(null);
  const [success, setSuccess] = useState<boolean>(false);

  const handleScan = (data: string) => {
    if (data) {
      try {
        const parsedData = parseQRCode(data);
        setScannedData(parsedData);
        setScanning(false);
        setError(null);
      } catch (err) {
        setError("Invalid QR code format");
      }
    }
  };

  const handleMarkAttendance = () => {
    if (user && scannedData && user.role === "student") {
      try {
        AttendanceService.markAttendance(
          { ...user, prn: "1234567890123" } as any, // Type cast since we don't have the actual PRN here
          scannedData
        );
        setSuccess(true);
        toast.success("Attendance marked successfully!");
      } catch (err: any) {
        setError(err.message || "Failed to mark attendance");
        toast.error(err.message || "Failed to mark attendance");
      }
    }
  };

  const handleScanAgain = () => {
    setScannedData(null);
    setScanning(true);
    setError(null);
    setSuccess(false);
  };

  return (
    <DashboardLayout title="Scan QR Code">
      <div className="max-w-md mx-auto">
        <Card>
          <CardContent className="pt-6">
            {error && (
              <Alert variant="destructive" className="mb-4">
                <AlertTitle>Error</AlertTitle>
                <AlertDescription>{error}</AlertDescription>
              </Alert>
            )}

            {success ? (
              <div className="text-center py-6">
                <div className="w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4">
                  <ScanLine size={32} className="text-green-600" />
                </div>
                <h3 className="text-xl font-medium mb-2">Attendance Marked!</h3>
                <p className="text-gray-500 mb-6">
                  You've successfully marked your attendance for{" "}
                  <strong>{scannedData?.subject}</strong>
                </p>
                <div className="space-y-2">
                  <CustomButton onClick={handleScanAgain}>
                    Scan Another QR Code
                  </CustomButton>
                </div>
              </div>
            ) : scanning ? (
              <MockQRScanner onScan={handleScan} />
            ) : (
              <div className="text-center py-4">
                <h3 className="text-lg font-medium mb-4">QR Code Scanned</h3>
                <div className="bg-gray-50 rounded-md p-4 mb-6">
                  <p className="mb-2">
                    <span className="font-medium">Subject:</span> {scannedData?.subject}
                  </p>
                  <p className="mb-2">
                    <span className="font-medium">Date:</span>{" "}
                    {scannedData?.date && new Date(scannedData.date).toLocaleDateString()}
                  </p>
                  <p>
                    <span className="font-medium">Time:</span> {scannedData?.time}
                  </p>
                </div>
                <div className="space-y-2">
                  <CustomButton onClick={handleMarkAttendance}>
                    Confirm Attendance
                  </CustomButton>
                  <CustomButton variant="outline" onClick={handleScanAgain}>
                    Scan Again
                  </CustomButton>
                </div>
              </div>
            )}
          </CardContent>
        </Card>
      </div>
    </DashboardLayout>
  );
};

export default ScanQRPage;
